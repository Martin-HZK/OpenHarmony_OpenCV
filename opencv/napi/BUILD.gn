# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# opencv core build

import("//build/ohos.gni")
import("//third_party/opencv/napi/opencv_napi_cfg.gni")

config("native_module_config") {
    cflags_cc = [
        "-Wno-address-of-temporary",
        "-Wno-unused-function",
        "-fexceptions",
        "-std=c++17",
    ]
    visibility = [ ":*" ]

    include_dirs = []
    defines = []
    if(opencv_debug_enable) {
        defines += ["OPENCV_NAPI_DEBUG"]
    }
    if(opencv_napi_with_core) {
        defines += ["OPENCV_NAPI_SUPPORT_CORE"]
    }
    if(opencv_napi_with_imgproc) {
        defines += ["OPENCV_NAPI_SUPPORT_IMGPROC"]
    }
    if(opencv_napi_with_imgcodecs) {
        defines += ["OPENCV_NAPI_SUPPORT_IMGCODECS"]
    }
    if(opencv_napi_with_objdetect) {
        defines += ["OPENCV_NAPI_SUPPORT_OBJDETECT"]
    }
}

ohos_shared_library("opencv_napi") {
    sources = [
        "//third_party/opencv/napi/common/log/src/opencv_log_wrapper.cpp",
        "//third_party/opencv/napi/js/napi/src/init.cpp",
        "//third_party/opencv/napi/js/napi/src/common.cpp",
    ]
    if(opencv_napi_with_core){
        sources += napi_sources_core
    }
    if(opencv_napi_with_imgproc){
        sources += napi_sources_imgproc
    }
    if(opencv_napi_with_imgcodecs){
        sources += napi_sources_imgcodecs
    }

    if(opencv_napi_with_objdetect){
        sources += napi_sources_objdetect
    }

    include_dirs = [
        "//third_party/opencv/napi/common/log/include",
        "//third_party/opencv/napi/js/napi/include",
        "//third_party/opencv/modules/core/include",
        "//third_party/opencv/modules/imgcodecs/include",
        "//third_party/opencv/modules/imgproc/include",
        "//third_party/opencv/modules/objdetect/include",
        "//third_party/opencv/modules/dnn/include",
        "//third_party/opencv/build/modules/core",
        "//third_party/opencv/build",
        "//third_party/opencv/build/opencv2",
        "$target_out_dir",
        
        "//foundation/ability/ability_runtime/frameworks/js/napi/inner/napi_common",
        "//foundation/ability/ability_runtime/interfaces/kits/native/ability/native",
        "//foundation/ability/ability_runtime/interfaces/kits/native/appkit/app",
        "//foundation/bundlemanager/bundle_framework/interfaces/inner_api/appexecfwk_core/include/bundlemgr",
        "//foundation/bundlemanager/bundle_framework/interfaces/inner_api/appexecfwk_base/include",
        "//third_party/libuv/include",
        "//third_party/bounds_checking_function/include",
        "//foundation/arkui/napi/interfaces/inner_api",
        "//foundation/arkui/napi/interfaces/kits",
        "//base/hiviewdfx/hilog/interfaces/native/innerkits/include",
        "//commonlibrary/c_utils/base/include",
    ]
    deps = [
        "//third_party/opencv/modules/core:libopencv_core",
        "//third_party/bounds_checking_function:libsec_static",
        "//third_party/libuv:uv",
    ]

    if(opencv_napi_with_imgproc){
        deps += ["//third_party/opencv/modules/imgproc:libopencv_imgproc"]
    }
    if(opencv_napi_with_imgcodecs){
        deps += ["//third_party/opencv/modules/imgcodecs:libopencv_imgcodecs"]
    }

    if(opencv_napi_with_objdetect){
        deps += [
            "//third_party/opencv/modules/objdetect:libopencv_objdetect",
            "//third_party/opencv/modules/dnn:libopencv_dnn",
        ]
    }

    configs = [ ":native_module_config" ]
    
    ldflags = [
        "-ldl",
    ]
    external_deps = [
        "ability_base:want",
        "ability_base:zuri",
        "ability_runtime:abilitykit_native",
        "ability_runtime:wantagent_innerkits",
         #"hiviewdfx_hilog_native:libhilog",
        "c_utils:utils",
        "hilog:libhilog",
        "napi:ace_napi",
        "relational_store:native_rdb",
    ]

    relative_install_dir = "module"
    part_name = "opencv"
    subsystem_name = "thirdparty"
}


